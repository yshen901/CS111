Total: 844 samples
     704  83.4%  83.4%      704  83.4% lock
      52   6.2%  89.6%       52   6.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:165
      14   1.7%  91.2%       14   1.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1721
      13   1.5%  92.8%       13   1.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1720
      11   1.3%  94.1%       71   8.4% SortedList_insert
      10   1.2%  95.3%       67   7.9% SortedList_lookup
       6   0.7%  96.0%        6   0.7% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:200
       6   0.7%  96.7%        6   0.7% _init
       5   0.6%  97.3%        5   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1714
       5   0.6%  97.9%        5   0.6% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1730
       4   0.5%  98.3%        4   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:202
       4   0.5%  98.8%        4   0.5% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:204
       2   0.2%  99.1%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:160
       2   0.2%  99.3%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:205
       2   0.2%  99.5%        2   0.2% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:1729
       1   0.1%  99.6%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:81
       1   0.1%  99.8%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:130
       1   0.1%  99.9%        1   0.1% ?? /usr/src/debug////////glibc-2.17-c758a686/string/../sysdeps/x86_64/multiarch/strcmp-sse42.S:203
       1   0.1% 100.0%        1   0.1% rand
       0   0.0% 100.0%      842  99.8% ?? /usr/src/debug////////glibc-2.17-c758a686/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:111
       0   0.0% 100.0%        1   0.1% __libc_start_main
       0   0.0% 100.0%        1   0.1% _start
       0   0.0% 100.0%        1   0.1% main
       0   0.0% 100.0%      842  99.8% start_thread
       0   0.0% 100.0%      842  99.8% thread_func
ROUTINE ====================== thread_func in /u/ee/ugrad/yuci/Desktop/CS111/Projects/lab2b/lab2_list.c
     0    842 Total samples (flat / cumulative)
     .      .   88:   if (opt_sync == 'm')
     .      .   89:     pthread_mutex_unlock(m_lock + list);
     .      .   90: }
     .      .   91: 
     .      .   92: /* THREAD FUNCTIONS */
---
     .      .   93: void* thread_func(void *args) {
     .      .   94:   int offset = *(int*)args;
     .      .   95:   SortedListElement_t *current;
     .      .   96:   struct timespec start_time, end_time;
     .      .   97:   
     .      .   98:   int length = 0;
     .      .   99:   char key[64];
     .      .  100:   int list = 0;
     .      .  101: 
     .      .  102:   // For list insertion: lock the list you are inserting into
     .      .  103:   for (int i = offset; i < offset + num_iters; i++) {
     .      .  104:     list = get_list(elements[i].key);
     .      .  105: 
     .      .  106:     safe_clock_gettime(&start_time);
     .    440  107:     lock(list);
     .      .  108:     safe_clock_gettime(&end_time);
     .      .  109:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  110:     
     .     71  111:     SortedList_insert(head + list, elements + i);
     .      .  112:     unlock(list);
     .      .  113:   }
     .      .  114: 
     .      .  115:   // For list length: lock all lists before checking
     .      .  116:   for (list = 0; list < num_lists; list++) {
     .      .  117:     safe_clock_gettime(&start_time);
     .      .  118:     lock(list);
     .      .  119:     safe_clock_gettime(&end_time);
     .      .  120:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  121:   }
     .      .  122:   for (list = 0; list < num_lists; list++)
     .      .  123:     length += SortedList_length(head + list);
     .      .  124:   if (length < num_iters) {
     .      .  125:     fprintf(stderr, "ERROR items have not been inserted property and atomically\n");
     .      .  126:     exit(2);
     .      .  127:   }
     .      .  128:   for (list = 0; list < num_lists; list++)
     .      .  129:     unlock(list);
     .      .  130: 
     .      .  131:   // For deleting elements: lock the list you are searching in
     .      .  132:   for (int i = offset; i < offset + num_iters; i++) {
     .      .  133:     strcpy(key, elements[i].key);
     .      .  134:     list = get_list(key);
     .      .  135: 
     .      .  136:     safe_clock_gettime(&start_time);
     .    264  137:     lock(list);
     .      .  138:     safe_clock_gettime(&end_time);
     .      .  139:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  140:     
     .     67  141:     if ((current = SortedList_lookup(head + list, key)) == NULL) {
     .      .  142:       fprintf(stderr, "ERROR element could not be found\n");
     .      .  143:       exit(2);
     .      .  144:     }
     .      .  145: 
     .      .  146:     if (SortedList_delete(current) != 0) {
     .      .  147:       fprintf(stderr, "ERROR element could not be deleted\n");
     .      .  148:       exit(2);
     .      .  149:     }
     .      .  150: 
     .      .  151:     unlock(list);
     .      .  152:   }
     .      .  153: 
     .      .  154:   return NULL;
     .      .  155: }
---
     .      .  156: 
     .      .  157: int main(int argc, char ** argv) {
     .      .  158:   char c;
     .      .  159:   int option_index = 0;
     .      .  160:   
ROUTINE ====================== thread_func in /u/ee/ugrad/yuci/Desktop/CS111/Projects/lab2b/lab2_list.c
     0    842 Total samples (flat / cumulative)
     .      .   88:   if (opt_sync == 'm')
     .      .   89:     pthread_mutex_unlock(m_lock + list);
     .      .   90: }
     .      .   91: 
     .      .   92: /* THREAD FUNCTIONS */
---
     .      .   93: void* thread_func(void *args) {
     .      .   94:   int offset = *(int*)args;
     .      .   95:   SortedListElement_t *current;
     .      .   96:   struct timespec start_time, end_time;
     .      .   97:   
     .      .   98:   int length = 0;
     .      .   99:   char key[64];
     .      .  100:   int list = 0;
     .      .  101: 
     .      .  102:   // For list insertion: lock the list you are inserting into
     .      .  103:   for (int i = offset; i < offset + num_iters; i++) {
     .      .  104:     list = get_list(elements[i].key);
     .      .  105: 
     .      .  106:     safe_clock_gettime(&start_time);
     .    440  107:     lock(list);
     .      .  108:     safe_clock_gettime(&end_time);
     .      .  109:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  110:     
     .     71  111:     SortedList_insert(head + list, elements + i);
     .      .  112:     unlock(list);
     .      .  113:   }
     .      .  114: 
     .      .  115:   // For list length: lock all lists before checking
     .      .  116:   for (list = 0; list < num_lists; list++) {
     .      .  117:     safe_clock_gettime(&start_time);
     .      .  118:     lock(list);
     .      .  119:     safe_clock_gettime(&end_time);
     .      .  120:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  121:   }
     .      .  122:   for (list = 0; list < num_lists; list++)
     .      .  123:     length += SortedList_length(head + list);
     .      .  124:   if (length < num_iters) {
     .      .  125:     fprintf(stderr, "ERROR items have not been inserted property and atomically\n");
     .      .  126:     exit(2);
     .      .  127:   }
     .      .  128:   for (list = 0; list < num_lists; list++)
     .      .  129:     unlock(list);
     .      .  130: 
     .      .  131:   // For deleting elements: lock the list you are searching in
     .      .  132:   for (int i = offset; i < offset + num_iters; i++) {
     .      .  133:     strcpy(key, elements[i].key);
     .      .  134:     list = get_list(key);
     .      .  135: 
     .      .  136:     safe_clock_gettime(&start_time);
     .    264  137:     lock(list);
     .      .  138:     safe_clock_gettime(&end_time);
     .      .  139:     lock_time += 1000000000L * (end_time.tv_sec - start_time.tv_sec) + end_time.tv_nsec - start_time.tv_nsec;
     .      .  140:     
     .     67  141:     if ((current = SortedList_lookup(head + list, key)) == NULL) {
     .      .  142:       fprintf(stderr, "ERROR element could not be found\n");
     .      .  143:       exit(2);
     .      .  144:     }
     .      .  145: 
     .      .  146:     if (SortedList_delete(current) != 0) {
     .      .  147:       fprintf(stderr, "ERROR element could not be deleted\n");
     .      .  148:       exit(2);
     .      .  149:     }
     .      .  150: 
     .      .  151:     unlock(list);
     .      .  152:   }
     .      .  153: 
     .      .  154:   return NULL;
     .      .  155: }
---
     .      .  156: 
     .      .  157: int main(int argc, char ** argv) {
     .      .  158:   char c;
     .      .  159:   int option_index = 0;
     .      .  160:   
ROUTINE ====================== lock in /u/ee/ugrad/yuci/Desktop/CS111/Projects/lab2b/lab2_list.c
   704    704 Total samples (flat / cumulative)
     .      .   73:   }
     .      .   74: }
     .      .   75: 
     .      .   76: /* Lock and Unlock Functions */
     .      .   77: 
---
     .      .   78: void lock(int list) {
     .      .   79:   if (opt_sync == 's')
   704    704   80:     while(__sync_lock_test_and_set(s_lock + list, 1));
     .      .   81:   if (opt_sync == 'm')
     .      .   82:     pthread_mutex_lock(m_lock + list);
     .      .   83: }
---
     .      .   84: 
     .      .   85: void unlock(int list) {
     .      .   86:   if (opt_sync =='s')
     .      .   87:     __sync_lock_release(s_lock + list);
     .      .   88:   if (opt_sync == 'm')
ROUTINE ====================== lock in /u/ee/ugrad/yuci/Desktop/CS111/Projects/lab2b/lab2_list.c
   704    704 Total samples (flat / cumulative)
     .      .   73:   }
     .      .   74: }
     .      .   75: 
     .      .   76: /* Lock and Unlock Functions */
     .      .   77: 
---
     .      .   78: void lock(int list) {
     .      .   79:   if (opt_sync == 's')
   704    704   80:     while(__sync_lock_test_and_set(s_lock + list, 1));
     .      .   81:   if (opt_sync == 'm')
     .      .   82:     pthread_mutex_lock(m_lock + list);
     .      .   83: }
---
     .      .   84: 
     .      .   85: void unlock(int list) {
     .      .   86:   if (opt_sync =='s')
     .      .   87:     __sync_lock_release(s_lock + list);
     .      .   88:   if (opt_sync == 'm')
